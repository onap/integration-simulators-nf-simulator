<?xml version="1.0" encoding="UTF-8"?>
<!--
  ============LICENSE_START=======================================================
  Simulator
  ================================================================================
  Copyright (C) 2019 Nokia. All rights reserved.
  ================================================================================
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  ============LICENSE_END=========================================================
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <packaging>pom</packaging>

    <parent>
        <groupId>org.onap.oparent</groupId>
        <artifactId>oparent</artifactId>
        <version>2.1.0</version>
    </parent>

    <groupId>org.onap.integration.simulators.nf-simulator</groupId>
    <artifactId>nf-simulator</artifactId>
    <version>1.0.0</version>
    <modules>
        <module>simulator-cli</module>
    </modules>

    <properties>
        <nexusproxy>https://nexus.onap.org</nexusproxy>
        <snapshotNexusPath>/content/repositories/snapshots/</snapshotNexusPath>
        <releaseNexusPath>/content/repositories/releases/</releaseNexusPath>
        <stagingNexusPath>/content/repositories/staging/</stagingNexusPath>
        <docker-image.namespace>onap</docker-image.namespace>
        <docker-image.name.prefix>org.onap.integration.simulators</docker-image.name.prefix>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <docker-maven-plugin.version>0.31.0</docker-maven-plugin.version>
        <skipDockerPush>true</skipDockerPush>
        <sonar.coverage.jacoco.xmlReportPaths>${project.reporting.outputDirectory}/jacoco-ut/jacoco.xml
        </sonar.coverage.jacoco.xmlReportPaths>

        <!--  Compile DEPENDENCIES VERSION  -->

        <maven-checkstyle-plugin.version>2.17</maven-checkstyle-plugin.version>
        <docker-maven-plugin-io-fabric.version>0.31.0</docker-maven-plugin-io-fabric.version>
        <spring-boot-starter.version>2.1.6.RELEASE</spring-boot-starter.version>
        <spring-boot-starter-web.version>2.1.6.RELEASE</spring-boot-starter-web.version>
        <spring-boot-starter-websocket.version>2.1.6.RELEASE</spring-boot-starter-websocket.version>
        <spring-boot-starter-actuator.version>2.1.0.RELEASE</spring-boot-starter-actuator.version>
        <spring-boot-starter-data-mongodb.version>2.1.0.RELEASE</spring-boot-starter-data-mongodb.version>
        <spring-cloud-config-client.version>2.1.4.RELEASE</spring-cloud-config-client.version>
        <lombok.version>1.18.2</lombok.version>
        <jnc.version>1.0</jnc.version>
        <spring-kafka.version>2.2.7.RELEASE</spring-kafka.version>
        <commons-cli.version>1.4</commons-cli.version>
        <javax.websocket-api.version>1.1</javax.websocket-api.version>
        <apache.httpclient.version>4.5.6</apache.httpclient.version>
        <httpmime.version>4.5.6</httpmime.version>
        <springfox-swagger2.version>2.9.2</springfox-swagger2.version>
        <springfox-swagger-ui.version>2.9.2</springfox-swagger-ui.version>
        <logback-core.version>1.2.3</logback-core.version>
        <slf4j-api.version>1.7.25</slf4j-api.version>
        <commons-io.version>2.6</commons-io.version>
        <json.version>20180130</json.version>
        <gson.version>2.8.2</gson.version>
        <commons-lang3.version>3.7</commons-lang3.version>
        <jackson-datatype-jdk8.version>2.9.7</jackson-datatype-jdk8.version>
        <jackson-datatype-jsr310.version>2.9.7</jackson-datatype-jsr310.version>
        <vavr-match.version>0.9.2</vavr-match.version>
        <vavr.version>0.9.2</vavr.version>
        <quartz.version>2.2.1</quartz.version>
        <quartz-jobs.version>2.2.1</quartz-jobs.version>
        <guava.version>21.0</guava.version>
        <logback-classic.version>1.2.3</logback-classic.version>
        <sonar-maven-plugin.version>3.7.0.1746</sonar-maven-plugin.version>

        <!--  TEST DEPENDENCIES VERSION  -->

        <assertj-core.version>3.9.1</assertj-core.version>
        <mockito-core.version>2.18.3</mockito-core.version>
        <junit-jupiter-engine.version>5.3.1</junit-jupiter-engine.version>
        <junit-vintage-engine.version>5.3.1</junit-vintage-engine.version>
        <junit.version>4.12</junit.version>
        <spring.boot.version>2.1.6.RELEASE</spring.boot.version>
        <spring.kafka.version>2.2.7.RELEASE</spring.kafka.version>
        <before-after-spring-test-runner.version>0.1.0</before-after-spring-test-runner.version>
        <docker-compose-rule-junit4.version>0.34.0</docker-compose-rule-junit4.version>
        <spring-test.version>5.0.4.RELEASE</spring-test.version>
        <junit-jupiter-migrationsupport.version>5.1.0</junit-jupiter-migrationsupport.version>
        <jsonassert.version>1.5.0</jsonassert.version>

        <skip-integration-tests>true</skip-integration-tests>
        <skip-unit-tests>false</skip-unit-tests>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!--  Compile DEPENDENCIES  -->
            <dependency>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
                <version>${sonar-maven-plugin.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter</artifactId>
                <version>${spring-boot-starter.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
                <version>${spring-boot-starter-web.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-websocket</artifactId>
                <version>${spring-boot-starter-websocket.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-mongodb</artifactId>
                <version>${spring-boot-starter-data-mongodb.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-actuator</artifactId>
                <version>${spring-boot-starter-actuator.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-config-client</artifactId>
                <version>${spring-cloud-config-client.version}</version>
            </dependency>
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>
            <dependency>
                <groupId>org.onosproject</groupId>
                <artifactId>jnc</artifactId>
                <version>${jnc.version}</version>
            </dependency>
            <dependency>
                <groupId>javax.websocket</groupId>
                <artifactId>javax.websocket-api</artifactId>
                <version>${javax.websocket-api.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
                <version>${apache.httpclient.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpmime</artifactId>
                <version>${httpmime.version}</version>
            </dependency>
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger2</artifactId>
                <version>${springfox-swagger2.version}</version>
            </dependency>
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger-ui</artifactId>
                <version>${springfox-swagger-ui.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.kafka</groupId>
                <artifactId>spring-kafka</artifactId>
                <version>${spring-kafka.version}</version>
            </dependency>
            <dependency>
                <groupId>commons-cli</groupId>
                <artifactId>commons-cli</artifactId>
                <version>${commons-cli.version}</version>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-core</artifactId>
                <version>${logback-core.version}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j-api.version}</version>
            </dependency>
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>${commons-io.version}</version>
            </dependency>
            <dependency>
                <groupId>org.json</groupId>
                <artifactId>json</artifactId>
                <version>${json.version}</version>
            </dependency>
            <dependency>
                <groupId>com.google.code.gson</groupId>
                <artifactId>gson</artifactId>
                <version>${gson.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons-lang3.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.datatype</groupId>
                <artifactId>jackson-datatype-jdk8</artifactId>
                <version>${jackson-datatype-jdk8.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.datatype</groupId>
                <artifactId>jackson-datatype-jsr310</artifactId>
                <version>${jackson-datatype-jsr310.version}</version>
            </dependency>
            <dependency>
                <groupId>io.vavr</groupId>
                <artifactId>vavr-match</artifactId>
                <version>${vavr-match.version}</version>
            </dependency>
            <dependency>
                <groupId>io.vavr</groupId>
                <artifactId>vavr</artifactId>
                <version>${vavr.version}</version>
            </dependency>
            <dependency>
                <groupId>org.quartz-scheduler</groupId>
                <artifactId>quartz</artifactId>
                <version>${quartz.version}</version>
            </dependency>
            <dependency>
                <groupId>org.quartz-scheduler</groupId>
                <artifactId>quartz-jobs</artifactId>
                <version>${quartz-jobs.version}</version>
            </dependency>
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>${logback-classic.version}</version>
            </dependency>

            <!--  TEST DEPENDENCIES  -->

            <dependency>
                <groupId>org.skyscreamer</groupId>
                <artifactId>jsonassert</artifactId>
                <version>${jsonassert.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.assertj</groupId>
                <artifactId>assertj-core</artifactId>
                <version>${assertj-core.version}</version>
            </dependency>
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-core</artifactId>
                <version>${mockito-core.version}</version>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-engine</artifactId>
                <version>${junit-jupiter-engine.version}</version>
            </dependency>
            <dependency>
                <groupId>org.junit.vintage</groupId>
                <artifactId>junit-vintage-engine</artifactId>
                <version>${junit-vintage-engine.version}</version>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.kafka</groupId>
                <artifactId>spring-kafka-test</artifactId>
                <version>${spring.kafka.version}</version>
            </dependency>
            <dependency>
                <groupId>org.bitbucket.radistao.test</groupId>
                <artifactId>before-after-spring-test-runner</artifactId>
                <version>${before-after-spring-test-runner.version}</version>
            </dependency>
            <dependency>
                <groupId>com.palantir.docker.compose</groupId>
                <artifactId>docker-compose-rule-junit4</artifactId>
                <version>${docker-compose-rule-junit4.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-test</artifactId>
                <version>${spring-test.version}</version>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-migrationsupport</artifactId>
                <version>${junit-jupiter-migrationsupport.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <profiles>
        <profile>
            <id>integration</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <skip-integration-tests>false</skip-integration-tests>
                <skip-unit-tests>true</skip-unit-tests>
            </properties>
            <modules>
                <module>pnfsimulator/integration</module>
            </modules>
        </profile>
    </profiles>

    <build>
        <pluginManagement>
            <plugins>
                <!-- To run SonarQube locally -->
                <plugin>
                    <groupId>org.sonarsource.scanner.maven</groupId>
                    <artifactId>sonar-maven-plugin</artifactId>
                    <version>${sonar-maven-plugin.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${maven-checkstyle-plugin.version}</version>
                <configuration>
                    <suppressionsLocation>checkstyle-suppressions.xml</suppressionsLocation>
                    <suppressionsFileExpression>checkstyle.suppressions.file</suppressionsFileExpression>
                </configuration>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${docker-maven-plugin-io-fabric.version}</version>
            </plugin>
        </plugins>
    </build>

    <distributionManagement>
        <repository>
            <id>ecomp-releases</id>
            <name>Integration simulators Release Repository</name>
            <url>${nexusproxy}${releaseNexusPath}</url>
        </repository>
        <snapshotRepository>
            <id>ecomp-snapshots</id>
            <name>Integration simulators Snapshot Repository</name>
            <url>${nexusproxy}${snapshotNexusPath}</url>
        </snapshotRepository>
        <site>
            <id>ecomp-site</id>
            <url>dav:${nexusproxy}${sitePath}</url>
        </site>
    </distributionManagement>

</project>
