# Copyright Â© 2022 Nokia. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "netconf-server.fullname" . }}
  namespace: {{ include "netconf.namespace" . }}
  labels:
    {{- include "netconf-server.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "netconf-server.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "netconf-server.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - env:
          - name: KAFKA_HOST_NAME
            value: {{ .Values.config.kafka_hostname | quote }}
          - name: ENABLE_TLS
            value: {{ .Values.config.tls.enabled | quote }}
          name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ include "repositoryGenerator.repository" . }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: {{ .Values.service.port }}
          readinessProbe:
            httpGet:
              path: /readiness
              port: {{ .Values.service.port }}
          {{- if .Values.config.certService.enabled }}
          volumeMounts:
            - name: certstore
              mountPath: {{ .Values.certsDir }}
            - name: prep-certs
              mountPath: /scripts/set-up-netopeer.sh
              subPath: set-up-netopeer.sh
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.config.certService.enabled }}
      volumes:
        - name: certstore
          projected:
            sources:
              - secret:
                  name: '{{.Values.clientCertificates.name}}-secret'
                  items:
                    - key: tls.key
                      path: client.key
                    - key: tls.crt
                      path: client.crt
                    - key: ca.crt
                      path: ca.crt
              - secret:
                  name: '{{.Values.serverCertificates.name}}-secret'
                  items:
                    - key: tls.key
                      path: server.key
                    - key: tls.crt
                      path: server.crt
        - name: prep-certs
          configMap:
            name: {{ include "netconf-server.fullname" . }}-prep-certs
            defaultMode: 0777
      {{- end }}




